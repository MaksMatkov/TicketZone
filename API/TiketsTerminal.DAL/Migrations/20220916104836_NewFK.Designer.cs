// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TiketsTerminal.DAL.Infrastructure;

namespace TiketsTerminal.DAL.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20220916104836_NewFK")]
    partial class NewFK
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.17");

            modelBuilder.Entity("TiketsTerminal.Domain.Models.Film", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("PK_Film");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.Property<string>("TrailerUrl")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Trailer_Url");

                    b.HasKey("ID");

                    b.ToTable("T_Film", "fbd");
                });

            modelBuilder.Entity("TiketsTerminal.Domain.Models.FilmViewingTime", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("PK_Film_Viewing_Time");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT")
                        .HasColumnName("Date");

                    b.Property<int>("FK_Film")
                        .HasColumnType("INTEGER")
                        .HasColumnName("FK_Film");

                    b.Property<int>("FK_Room")
                        .HasColumnType("INTEGER")
                        .HasColumnName("FK_Room");

                    b.HasKey("ID");

                    b.HasIndex("FK_Film");

                    b.HasIndex("FK_Room");

                    b.ToTable("T_Film_Viewing_Time", "fbd");
                });

            modelBuilder.Entity("TiketsTerminal.Domain.Models.Room", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("PK_Film");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Number");

                    b.Property<int>("SeatsCount")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Seats_Count");

                    b.HasKey("ID");

                    b.ToTable("T_Room", "fbd");
                });

            modelBuilder.Entity("TiketsTerminal.Domain.Models.TicketOrder", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("PK_Ticket_Order");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("Creation_Date");

                    b.Property<int>("FK_Film_Viewing_Time")
                        .HasColumnType("INTEGER")
                        .HasColumnName("FK_Film_Viewing_Time");

                    b.Property<int>("FK_User")
                        .HasColumnType("INTEGER")
                        .HasColumnName("FK_User");

                    b.HasKey("ID");

                    b.HasIndex("FK_Film_Viewing_Time");

                    b.HasIndex("FK_User");

                    b.ToTable("T_Ticket_Order", "fbd");
                });

            modelBuilder.Entity("TiketsTerminal.Domain.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("PK_User");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Email");

                    b.Property<int>("FK_Role")
                        .HasColumnType("INTEGER")
                        .HasColumnName("FK_Role");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Password");

                    b.HasKey("ID");

                    b.ToTable("T_User", "fbd");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Email = "admin@admin.admin",
                            FK_Role = 2,
                            Name = "ADMIN",
                            Password = "admin"
                        });
                });

            modelBuilder.Entity("TiketsTerminal.Domain.Models.FilmViewingTime", b =>
                {
                    b.HasOne("TiketsTerminal.Domain.Models.Film", "Film")
                        .WithMany("FilmViewingTimes")
                        .HasForeignKey("FK_Film")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TiketsTerminal.Domain.Models.Room", "Room")
                        .WithMany("FilmViewingTimes")
                        .HasForeignKey("FK_Room")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("TiketsTerminal.Domain.Models.TicketOrder", b =>
                {
                    b.HasOne("TiketsTerminal.Domain.Models.FilmViewingTime", "FilmViewingTime")
                        .WithMany("TicketOrders")
                        .HasForeignKey("FK_Film_Viewing_Time")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TiketsTerminal.Domain.Models.User", "User")
                        .WithMany("TicketOrders")
                        .HasForeignKey("FK_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FilmViewingTime");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TiketsTerminal.Domain.Models.Film", b =>
                {
                    b.Navigation("FilmViewingTimes");
                });

            modelBuilder.Entity("TiketsTerminal.Domain.Models.FilmViewingTime", b =>
                {
                    b.Navigation("TicketOrders");
                });

            modelBuilder.Entity("TiketsTerminal.Domain.Models.Room", b =>
                {
                    b.Navigation("FilmViewingTimes");
                });

            modelBuilder.Entity("TiketsTerminal.Domain.Models.User", b =>
                {
                    b.Navigation("TicketOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
